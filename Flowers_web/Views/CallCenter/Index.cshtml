@using System.Web.UI.WebControls
@using Flowers_web.Models
@using Flowers_web.Controllers
@model Flowers_web.Models.CallCenter

@{
    int id2 = 0;
    ViewBag.Title = "Index";
    @Scripts.Render("~/bundles/jquery")
}
<script>
    $(document).ready(function() {
        getBouket();
    });
    function getImage() {

    }



    function getBouket() {

        var cmbBouqets = '@Html.IdFor(o => o.ComboBouqets)';
        var cmbSizes = '@Html.IdFor(o => o.ComboSizes)';
        var cmbQ = '@Html.IdFor(o => o.ComboQuantities)';

        var image = "";
        var priceS = 0;
        var priceM = 0;
        var priceL = 0;
        var sum = 0;
        var dropdownBq = document.getElementById(cmbBouqets);
        var dropdownSz = document.getElementById(cmbSizes);
        var dropdownQ = document.getElementById(cmbQ);
        var valueBouq = dropdownBq.options[dropdownBq.selectedIndex].value;
        var valueSize = dropdownSz.options[dropdownSz.selectedIndex].value;
        var valueQ = dropdownQ.options[dropdownQ.selectedIndex].value;
        @{
            int idBouqet = Convert.ToInt32(Model.ComboBouqets);
            string imageSrc = "";
            string imageBase64 = "";
            byte[] array = null;
        }
        if (valueBouq == "1") {
           
            @{
               
                array = Model.Bouquets.Where(d => d.Bouquet_ID == 1).FirstOrDefault().Bouquet_Pictures;
                imageBase64 = Convert.ToBase64String(array);
               
        }
            image =@Html.Raw(Json.Encode(string.Format("data:image/png;base64,{0}", imageBase64)));
            $("#ImageControl").attr("src", image);
        }
        else if (valueBouq == "2") {
            @{
                array = Model.Bouquets.Where(d => d.Bouquet_ID == 2).FirstOrDefault().Bouquet_Pictures;
                imageBase64 = Convert.ToBase64String(array);
                
            }
            image =@Html.Raw(Json.Encode(string.Format("data:image/png;base64,{0}", imageBase64)));
            $("#ImageControl").attr("src", image);
        } else if (valueBouq == "3") {
           @{
               array = Model.Bouquets.Where(d => d.Bouquet_ID == 3).FirstOrDefault().Bouquet_Pictures;
               imageBase64 = Convert.ToBase64String(array);
               imageSrc = string.Format("data:image/png;base64,{0}", imageBase64);
           }
            image =@Html.Raw(Json.Encode(string.Format("data:image/png;base64,{0}", imageBase64)));
            $("#ImageControl").attr("src", image);
        }
        if (valueSize == "S") {
         
            if (valueBouq == "1") {
                priceM = @Html.Raw(Json.Encode(Model.Bouquets?.FirstOrDefault(f => f.Bouquet_ID == 1)?.Bouquet_Price_S));
            } else if (valueBouq == "2") {
                priceM = @Html.Raw(Json.Encode(Model.Bouquets?.FirstOrDefault(f => f.Bouquet_ID == 2)?.Bouquet_Price_S));
            } else if (valueBouq == "3") {
                priceM = @Html.Raw(Json.Encode(Model.Bouquets?.FirstOrDefault(f => f.Bouquet_ID == 3)?.Bouquet_Price_S));
            }
            sum = valueQ * priceM;
        } else if (valueSize == "M") {
            if (valueBouq == "1") {
                priceM = @Html.Raw(Json.Encode(Model.Bouquets?.FirstOrDefault(f => f.Bouquet_ID == 1)?.Bouquet_Price_M));
            } else if (valueBouq == "2") {
                priceM = @Html.Raw(Json.Encode(Model.Bouquets?.FirstOrDefault(f => f.Bouquet_ID == 2)?.Bouquet_Price_M));
            } else if (valueBouq == "3") {
                priceM = @Html.Raw(Json.Encode(Model.Bouquets?.FirstOrDefault(f => f.Bouquet_ID == 3)?.Bouquet_Price_M));
            }
            sum = valueQ * priceM;
          
        } else if (valueSize == "L") {
            if (valueBouq == "1") {
                priceL = @Html.Raw(Json.Encode(Model.Bouquets?.FirstOrDefault(f => f.Bouquet_ID == 1)?.Bouquet_Price_L));
            } else if (valueBouq == "2") {
                priceL = @Html.Raw(Json.Encode(Model.Bouquets?.FirstOrDefault(f => f.Bouquet_ID == 2)?.Bouquet_Price_L));
            } else if (valueBouq == "3") {
                priceL = @Html.Raw(Json.Encode(Model.Bouquets?.FirstOrDefault(f => f.Bouquet_ID == 3)?.Bouquet_Price_L));

            }
            sum = valueQ * priceL;
          

        }
       // var hSum = document.getElementById("Sum");
       // hSum.val = sum;
      //  document.getElementById("Sum").innerHTML = hSum.val.toString();
        $("#Sum").attr("value", sum);

    }

   
</script>
<h2>Index</h2>
@using (Html.BeginForm("Calculate", "CallCenter", FormMethod.Post))
{<div style="border: 2px solid red">


    <img id="ImageControl" width="100" height="100" />

    @Html.LabelFor(d => d.Sum, "Price:")
    @Html.TextBoxFor(d => d.Sum, new { width = "350px;" })

    @*@Html.Label("sum", new { id = "sum" })*@
    <br />

    @Html.LabelFor(d => d.ComboBouqets, "Boucket")
    @Html.DropDownListFor(model => model.ComboBouqets,
        new SelectList(Model.Bouquets, "Bouquet_ID", "Bouquet_Name") as SelectList, new {onchange = "getBouket();"})
    <br />

    @Html.LabelFor(d => d.ComboQuantities, "Quantity")
    @Html.DropDownListFor(model => model.ComboQuantities,
        new SelectList(Model.Quantities) as SelectList,  new {onchange = "getBouket();"})
    <br />
    @Html.LabelFor(d => d.DateDelivery, "DateDelivery")
     <div class="editor-field">
         @Html.EditorFor(model => model.DateDelivery)
         @Html.ValidationMessageFor(model => model.DateDelivery)
     </div>
    <br />
    <br />
    <br />
    <br />
    <br />

    @Html.LabelFor(d => d.ComboSizes, "Size")
    @Html.DropDownListFor(model => model.ComboSizes,
        new SelectList(Model.Sizes) as SelectList,  new {onchange = "getBouket();"})
    <br />
    @Html.LabelFor(d => d.ComboPostalCode, "Zip")
    @Html.TextBoxFor(d => d.ComboPostalCode, "ZipTxb")
    <br />

    @Html.LabelFor(d => d.TxbAddress, "Address:")
    @Html.TextBoxFor(d => d.TxbAddress, new { width = "350px;" })
    <br />

    @Html.LabelFor(d => d.TxbCity, "City:")
    @Html.TextBoxFor(d => d.TxbCity, "CityTxb")
    <br />


    @Html.LabelFor(d => d.Txb1, "Building Name:")
    @Html.TextBoxFor(d => d.Txb1, new { width = "350px;" })
    <br />

    @Html.LabelFor(d => d.Txb2, "Building Number:")
    @Html.TextBoxFor(d => d.Txb2, new { width = "350px;" })
    <br />

    @Html.LabelFor(d => d.Txb3, "Sub Building:")
    @Html.TextBoxFor(d => d.Txb3, new { width = "350px;" })
    <br />

    @Html.LabelFor(d => d.Txb4, "Street:")
    @Html.TextBoxFor(d => d.Txb4, new { width = "350px;" })
    <br />

    @Html.LabelFor(d => d.Txb5, "District:")
    @Html.TextBoxFor(d => d.Txb5, new { width = "350px;" })
    <br />

    @Html.LabelFor(d => d.Txb6, "Province Name:")
    @Html.TextBoxFor(d => d.Txb6, new { width = "350px;" })
    <br />

    @Html.LabelFor(d => d.Txb7, "2-Character ISO Code:")
    @Html.TextBoxFor(d => d.Txb7, new { width = "350px;" })
    <br />

    @Html.LabelFor(d => d.Txb8, "8:")
    @Html.TextBoxFor(d => d.Txb8, new { width = "350px;" })
    <br />
    <br />
    <br />
    <br />
    <div class="form-horizontal">
        <h4>User</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })


        <div class="form-group">
            @Html.LabelFor(model => model.Client.Lname, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Client.Lname, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Client.Lname, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Client.Fname, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Client.Fname, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Client.Fname, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Client.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.DropDownList("Gender", new List<SelectListItem>
                    {
                        new SelectListItem{ Text="Mr", Value = "0" },
                        new SelectListItem{ Text="Mrs", Value = "1" }
                    })
                    @Html.ValidationMessageFor(model => model.Client.Gender, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Client.Email, "Email", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Client.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Client.Email, "", new { @class = "text-danger" })
            </div>
        </div>


    </div>


    <input type="submit" value="Send to DB" />
</div>
    <link rel="stylesheet" type="text/css" href="http://ws1.postescanada-canadapost.ca/css/addresscomplete-2.30.min.css?key=aw22-uf97-ee63-hz98" /><script type="text/javascript" src="http://ws1.postescanada-canadapost.ca/js/addresscomplete-2.30.min.js?key=aw22-uf97-ee63-hz98"></script>                                                                                                             
}


