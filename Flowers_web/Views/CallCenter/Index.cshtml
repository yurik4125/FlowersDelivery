@using System.Web.UI.WebControls
@using Flowers_web.Models
@using Flowers_web.Controllers
@model Flowers_web.Models.CallCenter

@{
    int id2 = 0;
    ViewBag.Title = "Index";
    @*@Scripts.Render("~/bundles/jquery")*@
    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <link rel="stylesheet" href="/resources/demos/style.css">
    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
}
<script>

   

    $(document).ready(function () {

        
        $("#FindUser").autocomplete({
            select: function (event, ui) {                
                alert(ui.item.value);
                $.ajax({
                    url: "/CallCenter/SearchUser",
                     type: "POST",
                    dataType: "json",
                    data1: { search: ui.item.value },
                    success: function (data1) {
                        $.map(data1, function (item) {
                         
                            alert(" item.Fname ==" + item.Fname);
                            $("#Fname").attr("value", item.Fname);

                        });
                     
                    }
                });

            },
            source: function (request, response) {
                var array = new Array();
              
                $.ajax({
                    url: "/CallCenter/FindUsers",
                    type: "POST",
                    dataType: "json",
                    data: { Prefix: request.term },
                    success: function (data) {
                        response($.map(data, function (item) {
                           // alert(" item.CityName" + item.CityName);
                            //alert(" item.Id" + item.Id);

                            // return { label: item.CityName, value: item.CityName };
                            array.push(item.CityName);

                        }))
                      //  console.log(array);
                        $("#FindUser").autocomplete({ source: array });
                    }
                })
            },
            messages: {
                noResults: "", results: ""
            }
        });
        getBouket();
    });
    function getImage() {

    }
     function getuser() {
        var user = $("#FindUser").val();

         $.ajax({

    url: '@Url.Action("SearchUser")',
    contentType: "application/json; charset=utf-8",
    data: { search: user },
    dataType: "json",
             success:
                 //function (result)
             //{
                 //alert(result);
                 function (recData) {
                // alert(recData);
                     $.each(recData, function (i, item) {
                         alert(recData[i].Cust_ID);
                         alert(recData[i].Fname);

                 });

             },
    error: function () { alert('Failed'); }
});
    }
    function GetSampleUsersList() {
        var userDetails = {};
        var usersList = [];
        for (var i = 1; i <= 3; i++) {
            userDetails["Cust_ID"] = i;
            userDetails["Fname"] = "User- " + i;
            usersList.push(userDetails);
        }
        return JSON.stringify(usersList);
    }

    function getBouket() {

        var cmbBouqets = '@Html.IdFor(o => o.ComboBouqets)';
        var cmbSizes = '@Html.IdFor(o => o.ComboSizes)';
        var cmbQ = '@Html.IdFor(o => o.ComboQuantities)';

        var image = "";
        var priceS = 0;
        var priceM = 0;
        var priceL = 0;
        var sum = 0;
        var dropdownBq = document.getElementById(cmbBouqets);
        var dropdownSz = document.getElementById(cmbSizes);
        var dropdownQ = document.getElementById(cmbQ);
        var valueBouq = dropdownBq.options[dropdownBq.selectedIndex].value;
        var valueSize = dropdownSz.options[dropdownSz.selectedIndex].value;
        var valueQ = dropdownQ.options[dropdownQ.selectedIndex].value;
        @{
            int idBouqet = Convert.ToInt32(Model.ComboBouqets);
            string imageSrc = "";
            string imageBase64 = "";
            byte[] array = null;
        }
        if (valueBouq == "1") {

            @{

                array = Model.Bouquets.Where(d => d.Bouquet_ID == 1).FirstOrDefault().Bouquet_Pictures;
                imageBase64 = Convert.ToBase64String(array);

        }
            image =@Html.Raw(Json.Encode(string.Format("data:image/png;base64,{0}", imageBase64)));
            $("#ImageControl").attr("src", image);
        }
        else if (valueBouq == "2") {
            @{
                array = Model.Bouquets.Where(d => d.Bouquet_ID == 2).FirstOrDefault().Bouquet_Pictures;
                imageBase64 = Convert.ToBase64String(array);

            }
            image =@Html.Raw(Json.Encode(string.Format("data:image/png;base64,{0}", imageBase64)));
            $("#ImageControl").attr("src", image);
        } else if (valueBouq == "3") {
           @{
               array = Model.Bouquets.Where(d => d.Bouquet_ID == 3).FirstOrDefault().Bouquet_Pictures;
               imageBase64 = Convert.ToBase64String(array);
               imageSrc = string.Format("data:image/png;base64,{0}", imageBase64);
           }
            image =@Html.Raw(Json.Encode(string.Format("data:image/png;base64,{0}", imageBase64)));
            $("#ImageControl").attr("src", image);
        }
        if (valueSize == "S") {

            if (valueBouq == "1") {
                priceM = @Html.Raw(Json.Encode(Model.Bouquets?.FirstOrDefault(f => f.Bouquet_ID == 1)?.Bouquet_Price_S));
            } else if (valueBouq == "2") {
                priceM = @Html.Raw(Json.Encode(Model.Bouquets?.FirstOrDefault(f => f.Bouquet_ID == 2)?.Bouquet_Price_S));
            } else if (valueBouq == "3") {
                priceM = @Html.Raw(Json.Encode(Model.Bouquets?.FirstOrDefault(f => f.Bouquet_ID == 3)?.Bouquet_Price_S));
            }
            sum = valueQ * priceM;
        } else if (valueSize == "M") {
            if (valueBouq == "1") {
                priceM = @Html.Raw(Json.Encode(Model.Bouquets?.FirstOrDefault(f => f.Bouquet_ID == 1)?.Bouquet_Price_M));
            } else if (valueBouq == "2") {
                priceM = @Html.Raw(Json.Encode(Model.Bouquets?.FirstOrDefault(f => f.Bouquet_ID == 2)?.Bouquet_Price_M));
            } else if (valueBouq == "3") {
                priceM = @Html.Raw(Json.Encode(Model.Bouquets?.FirstOrDefault(f => f.Bouquet_ID == 3)?.Bouquet_Price_M));
            }
            sum = valueQ * priceM;

        } else if (valueSize == "L") {
            if (valueBouq == "1") {
                priceL = @Html.Raw(Json.Encode(Model.Bouquets?.FirstOrDefault(f => f.Bouquet_ID == 1)?.Bouquet_Price_L));
            } else if (valueBouq == "2") {
                priceL = @Html.Raw(Json.Encode(Model.Bouquets?.FirstOrDefault(f => f.Bouquet_ID == 2)?.Bouquet_Price_L));
            } else if (valueBouq == "3") {
                priceL = @Html.Raw(Json.Encode(Model.Bouquets?.FirstOrDefault(f => f.Bouquet_ID == 3)?.Bouquet_Price_L));

            }
            sum = valueQ * priceL;


        }
       // var hSum = document.getElementById("Sum");
       // hSum.val = sum;
      //  document.getElementById("Sum").innerHTML = hSum.val.toString();
        $("#Sum").attr("value", sum);

    }


</script>
<h2>Index</h2>
@using (Html.BeginForm("Calculate", "CallCenter", FormMethod.Post))
{<div style="border: 2px solid red">


        <img id="ImageControl" width="100" height="100" />

        @Html.LabelFor(d => d.Sum, "Price:")
        @Html.TextBoxFor(d => d.Sum, new { width = "350px;" })

        @*@Html.Label("sum", new { id = "sum" })*@
        <br />

        @Html.LabelFor(d => d.ComboBouqets, "Boucket")
        @Html.DropDownListFor(model => model.ComboBouqets,
            new SelectList(Model.Bouquets, "Bouquet_ID", "Bouquet_Name") as SelectList, new {onchange = "getBouket();"})
        <br />

        @Html.LabelFor(d => d.ComboQuantities, "Quantity")
        @Html.DropDownListFor(model => model.ComboQuantities,
            new SelectList(Model.Quantities) as SelectList,  new {onchange = "getBouket();"})
        <br />
        @Html.LabelFor(d => d.DateDelivery, "DateDelivery")
        <div class="editor-field">
            @Html.EditorFor(model => model.DateDelivery)
            @Html.ValidationMessageFor(model => model.DateDelivery)
        </div>
        <br />
        <br />
        <br />
        <br />
        <br />

        @Html.LabelFor(d => d.ComboSizes, "Size")
        @Html.DropDownListFor(model => model.ComboSizes,
            new SelectList(Model.Sizes) as SelectList,  new {onchange = "getBouket();"})
        <br />
        @Html.LabelFor(d => d.Address_ZIPCODE, "Address_ZIPCODE:")
        @Html.TextBoxFor(d => d.Address_ZIPCODE, new { width = "350px;" })
        <br />

        @Html.LabelFor(d => d.Address_Numder_Appartment, "Address_Numder_Appartment:")
        @Html.TextBoxFor(d => d.Address_Numder_Appartment, new { width = "350px;" })
        <br />

        @Html.LabelFor(d => d.Address_Number_Street, "Address_Number_Street:")
        @Html.TextBoxFor(d => d.Address_Number_Street, new { width = "350px;" })
        <br />


        @Html.LabelFor(d => d.Address_Name_Street, "Address_Name_Street:")
        @Html.TextBoxFor(d => d.Address_Name_Street, new { width = "350px;" })
        <br />

        @Html.LabelFor(d => d.Address_City, "Address_City:")
        @Html.TextBoxFor(d => d.Address_City, new { width = "350px;" })
        <br />

        @Html.LabelFor(d => d.Address_State, "Address_State:")
        @Html.TextBoxFor(d => d.Address_State, new { width = "350px;" })
        <br />

        @Html.LabelFor(d => d.Address_Country, "Address_Country:")
        @Html.TextBoxFor(d => d.Address_Country, new { width = "350px;" })
        <br />

        @Html.LabelFor(d => d.Address_line1, "Address_line1:")
        @Html.TextBoxFor(d => d.Address_line1, new { width = "350px;" })
        <br />

        @Html.LabelFor(d => d.Address_line2, "Address_line2:")
        @Html.TextBoxFor(d => d.Address_line2, new { width = "350px;" })
        <br />



        <br />
        <br />
        <br />
        <div class="form-horizontal">
            <h4>User</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })


            <div class="form-group">
                @Html.LabelFor(model => model.Client.Lname, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                        @Html.EditorFor(model => model.Client.Lname, new { htmlAttributes = new { @id = "FindUser", @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Client.Lname, "", new { @class = "text-danger" })
                                        
                    </div>
                @*<div class="col-md-12">
                    @Html.EditorFor(model => model.FindUser, new { htmlAttributes = new { @class = "form-control" } })
                </div>*@
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Client.Fname, htmlAttributes: new { @id = "Fname", @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Client.Fname, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Client.Fname, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Client.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.DropDownList("Gender", new List<SelectListItem>
                        {
                            new SelectListItem{ Text="Mr", Value = "0" },
                            new SelectListItem{ Text="Mrs", Value = "1" }
                        })
                        @Html.ValidationMessageFor(model => model.Client.Gender, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Client.Email, "Email", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Client.Email, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Client.Email, "", new { @class = "text-danger" })
                </div>
            </div>


        </div>


        <input type="submit" value="Send to DB" />
    </div>
    <link rel="stylesheet" type="text/css" href="http://ws1.postescanada-canadapost.ca/css/addresscomplete-2.30.min.css?key=xb41-jt45-ra25-ff88" />
    <script type="text/javascript" src="http://ws1.postescanada-canadapost.ca/js/addresscomplete-2.30.min.js?key=xb41-jt45-ra25-ff88"></script>
}


@*<div class="form-group">
        @Html.LabelFor(model => model.FindUser, "FindUser", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.FindUser, new { htmlAttributes = new { @class = "form-control" } })
            <button onclick="getuser()" value="FindUser" style="width=200px;"></button>
        </div>

    </div>*@

@*@Html.LabelFor(m => m.FindUser)
    @Html.AutocompleteFor(m => m.FindUser, "Autocomplete", "CallCenter")*@


@*<div class="ui-widget">
        <label for="tags">Tags: </label>
        <input id="tags">
    </div>*@